# -*- coding: utf-8 -*-
"""Code_GlamSchool

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F1IW0XMVLvykRWNMqQUrzs-pNrjULumU
"""

import random

class GlamSchoolGame:
    def __init__(self):
        self.stats = {
            'Charm': 50,
            'Fame': 50,
            'Smarts': 50,
            'Style': 50,
            'Energy': 100,
            'Mood': 100
        }
        self.inventory = {'Outfits': ['Casual Chic', 'Evening Glam', 'Sporty Fun', 'Vintage Vibe', 'Business Formal']}
        self.characters = {
            'Alice': {'relationship': 50, 'role': 'protagonist'},
            'Bob': {'relationship': 30, 'role': 'antagonist'},
            'Charlie': {'relationship': 40, 'role': 'protagonist'},
            'Diana': {'relationship': 20, 'role': 'antagonist'}
        }
        self.day = 0
        self.max_days = 30  # Duration of the game in days

    def run_game(self):
        self.setup_character()
        try:
            while self.day < self.max_days:
                self.new_day()
        except Exception as e:
            print(f"\n{str(e)} 🏁 Sashay away from your school year...")
        finally:
            self.evaluate_performance()

    def setup_character(self):
        print("\n========== 🌟🎓 Welcome to Glam School, darling! 🎓🌟 ==========\n")
        name = input("What's your fab name? 💁‍♀️ ")
        print(f"Yass {name}, let's slay this school year! 💅")
        print("BTW, here's the tea on your fellow students:")
        for character, details in self.characters.items():
            print(f"- {character} ({'Friend' if details['role'] == 'protagonist' else 'Frenemy'})")

    def new_day(self):
        self.day += 1
        print(f"\n=========== 🌅 Day {self.day} at Glam School 🌅 ===========")
        self.display_stats()
        self.daily_activities()
        self.random_event()
        if self.stats['Energy'] < 20:
            raise Exception("You're totally drained, babe! 🥱 Time to catch some Z's.")
        if self.stats['Mood'] < 20:
            raise Exception("You're just not feeling it today, huh? 😞")

    def display_stats(self):
        print("\n📊 Current Stats:")
        for stat, value in self.stats.items():
            print(f"{stat}: {value} 💖")
        print("\n👯‍♂️ Relationships:")
        for person, details in self.characters.items():
            print(f"{person}: {details['relationship']} {'💕' if details['role'] == 'protagonist' else '🐍'}")

    def daily_activities(self):
        activities = {
            'Morning': ['Strategy class tea spill', 'Personal project runway', 'Influencer schmoozing'],
            'Afternoon': ['Creative workshop', 'Thrift flip shopping', 'Social event planning'],
            'Evening': ['VIP Gala attendance', 'Zen study sesh', 'Dinner party hosting']
        }
        for time, options in activities.items():
            print(f"\n===== {time} Options =====")
            for i, activity in enumerate(options, 1):
                print(f"{i}: {activity}")
            choice = int(input("Spill, what's your choice? 🎲 ")) - 1
            self.perform_activity(options[choice])

    def perform_activity(self, activity):
        effects = {
            'Strategy class tea spill': ('Smarts', 10, None, 0),
            'Personal project runway': ('Style', 15, None, 0),
            'Influencer schmoozing': ('Charm', 20, 'Alice', 5),
            'Creative workshop': ('Smarts', 15, None, 0),
            'Thrift flip shopping': ('Style', 20, None, 0),
            'Social event planning': ('Charm', 15, 'Bob', -10),
            'VIP Gala attendance': ('Fame', 25, 'Charlie', 15),
            'Zen study sesh': ('Smarts', 20, None, 0),
            'Dinner party hosting': ('Charm', 25, 'Diana', -20)
        }
        stat, increase, person, rel_change = effects[activity]
        self.stats[stat] += increase
        if person:
            self.characters[person]['relationship'] += rel_change
        self.stats['Energy'] -= 10
        self.stats['Mood'] -= 5
        print(f"\n🚀 {activity} happened! {stat} up by {increase}.")

    def random_event(self):
        event_chance = random.randint(1, 5)
        if event_chance == 1:
            self.handle_special_event()

    def handle_special_event(self):
        event_type = random.choice(['Pop-up Quiz', 'Runway Malfunction', 'Celeb School Visit'])
        print(f"\n===== Special Event: {event_type} =====")
        if event_type == 'Pop-up Quiz':
            self.stats['Smarts'] += 15
            print("You aced a pop-up quiz! Smarts boost! 🧠")
        elif event_type == 'Runway Malfunction':
            self.stats['Style'] -= 10
            print("Runway oopsie! Style dip. 😬")
        elif event_type == 'Celeb School Visit':
            self.stats['Charm'] += 20
            print("You dazzled a celeb visitor! Charm skyrockets! 🌟")

    def evaluate_performance(self):
        print("\n========== 🏆 End-of-Year Glam Review 🏆 ==========\n")
        max_relationship = max(self.characters, key=lambda x: self.characters[x]['relationship'])
        min_relationship = min(self.characters, key=lambda x: self.characters[x]['relationship'])
        print(f"📈 Stats Review:")
        for stat, value in self.stats.items():
            print(f"{stat}: {value}")
        print(f"👯‍♂️ Bestie: {max_relationship} with {self.characters[max_relationship]['relationship']} points")
        print(f"🐍 Frenemy: {min_relationship} with {self.characters[min_relationship]['relationship']} points")
        # Sophisticated logic for end-game based on stats and top/bottom relationships
        if self.stats['Style'] > 80 and self.stats['Fame'] > 80:
            print("You're the school's Top Fashion Icon now! 🌍✨")
        elif self.stats['Charm'] > 80:
            print("Congrats, you're officially the Social Butterfly! 🦋")
        elif self.stats['Smarts'] > 80:
            print("You're the brainiest of them all! 🎓👑")
        else:
            print("School's out! More glam, more prep next time! 👜👠")

game = GlamSchoolGame()
game.run_game()